package view

import (
	"github.com/edgarsilva/go-scaffold/internal/model"
	"strconv"
)

templ ClinicsPage(vc *Ctx, clinics []model.Clinic) {
	@Layout(vc) {
		<div class="px-4 lg:px-8">
			@CmpBtnBack(l(vc.Locale, "btn.back"), "/")
		</div>
		<section class="grow flex flex-col px-0 sm:px-4 py-8 md:py-16 lg:w-2/3 lg:max-w-4xl lg:mx-auto">
			<div
				class="relative"
			>
				<hgroup class="md:flex md:justify-between md:items-center pb-4 px-2 md:px-0 w-full" hx-boost="true">
					<div class="md:flex md:gap-2 items-baseline w-full md:justify-between md:pr-4">
						<h1 class="flex w-full md:w-auto font-bold text-2xl mb-4 md:mb-0">
							{ vc.l("str.clinics") }
							<a
								href="/clinics/new"
								class="ml-auto btn btn-primary btn-sm md:hidden"
							>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
									<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h1.5m-1.5 3h1.5m-1.5 3h1.5m3-6H15m-1.5 3H15m-1.5 3H15M9 21v-3.375c0-.621.504-1.125 1.125-1.125h3.75c.621 0 1.125.504 1.125 1.125V21"></path>
								</svg>
								{ l(vc.Locale, "btn.new") }
							</a>
						</h1>
						<label class="input flex items-center gap-2 rounded-full focus:outline">
							@IconSearch("size-5")
							<input
								type="search"
								name="term"
								value=""
								class="grow"
								required
								placeholder={ vc.l("str.search_clinics") }
								hx-get="/clinics/search"
								hx-target="#clinics_list"
								hx-swap="outerHTML"
								hx-trigger="input changed delay:350ms, search"
							/>
							<kbd class="hidden kbd kbd-sm md:flex">ctrl</kbd>
							<kbd class="hidden kbd kbd-sm md:flex">k</kbd>
						</label>
					</div>
					<a
						href="/clinics/new"
						class="hidden md:flex btn btn-primary btn-sm"
					>
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
							<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h1.5m-1.5 3h1.5m-1.5 3h1.5m3-6H15m-1.5 3H15m-1.5 3H15M9 21v-3.375c0-.621.504-1.125 1.125-1.125h3.75c.621 0 1.125.504 1.125 1.125V21"></path>
						</svg>
						{ l(vc.Locale, "btn.new") }
					</a>
				</hgroup>
				if (len(clinics) > 0) {
					@ClinicsList(vc, clinics)
				} else {
					@ClinicsEmptyList(vc)
				}
			</div>
		</section>
	}
}

templ ClinicPage(vc *Ctx, clinic model.Clinic) {
	@Layout(vc) {
		<div class="px-4 lg:px-8">
			@CmpBtnBack(l(vc.Locale, "btn.back"), "/clinics")
		</div>
		<section id="clinic_profile_cont" class="grow flex flex-col px-0 sm:px-4 md:px-8 py-8 lg:justify-center lg:w-2/3 lg:max-w-4xl lg:mx-auto">
			if clinic.ID == "" || clinic.ID == "new" {
				<h1 class="px-4 sm:px-0 font-bold text-2xl pb-0 w-full">{ l(vc.Locale, "str.new_clinic") }</h1>
			} else {
				<h1 class="px-4 sm:px-0 font-bold text-2xl pb-0 w-full">{ l(vc.Locale, "str.edit_clinic") }</h1>
			}
			@ClinicProfile(clinic, vc)
		</section>
	}
}

templ ClinicsList(vc *Ctx, clinics []model.Clinic) {
	<section id="clinics_list" role="list" class="app-card overflow-hidden">
		<ul role="list" class="divide-y divide-base-content/10">
			for _, clinic := range clinics {
				@ClinicLi(clinic, vc)
			}
		</ul>
	</section>
}

templ ClinicLi(clinic model.Clinic, vc *Ctx) {
	<li class="relative flex justify-between items-center gap-x-6 px-2 py-2 hover:bg-base-200/75">
		<div class="flex items-center min-w-0 gap-x-4">
			if clinic.ProfilePic != "" {
				<div class="avatar">
					<div class="w-12 rounded-full">
						<img src={ string(templ.URL(clinic.ProfilePic)) }/>
					</div>
				</div>
			} else {
				<div class="avatar placeholder">
					<div class="bg-neutral text-neutral-content rounded-full w-12">
						<span class="text-xl">{ clinic.Initials() }</span>
					</div>
				</div>
			}
			<div class="min-w-0">
				<p class="font-semibold text-base-content flex items-center" hx-boost="true">
					<a href="/clinics">
						{ clinic.Name }
					</a>
					if clinic.Favorite {
						<span class="text-yellow-500 ml-2">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5">
								<path fill-rule="evenodd" d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z" clip-rule="evenodd"></path>
							</svg>
						</span>
					}
				</p>
				<p class="flex text-xs text-base-content/60">
					<a
						href="mailto:leslie.alexander@example.com"
						class="relative truncate hover:underline"
					>
						{ clinic.Email }
					</a>
				</p>
			</div>
		</div>
		<div class="flex shrink-0 items-center gap-x-4">
			<div class="hidden sm:flex sm:flex-col sm:items-end">
				<div class="flex gap-2 z-10 mb-2">
					<a
						href={ templ.URL("/appointments?clinicId=" + clinic.ID) }
						class="btn btn-outline btn-primary"
					>
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h.008v.008H12v-.008ZM12 15h.008v.008H12V15Zm0 2.25h.008v.008H12v-.008ZM9.75 15h.008v.008H9.75V15Zm0 2.25h.008v.008H9.75v-.008ZM7.5 15h.008v.008H7.5V15Zm0 2.25h.008v.008H7.5v-.008Zm6.75-4.5h.008v.008h-.008v-.008Zm0 2.25h.008v.008h-.008V15Zm0 2.25h.008v.008h-.008v-.008Zm2.25-4.5h.008v.008H16.5v-.008Zm0 2.25h.008v.008H16.5V15Z"></path>
						</svg>
						{ l(vc.Locale, "btn.appointments") }
					</a>
					<a
						class="btn btn-outline btn-secondary"
						href={ templ.URL("/clinics/" + clinic.ID) }
						hx-boost="true"
					>
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path>
						</svg>
						{ l(vc.Locale, "btn.edit") }
					</a>
				</div>
			</div>
		</div>
	</li>
}

templ ClinicDeletForm(clinic model.Clinic, vc *Ctx) {
	<form
		method="POST"
		action={ templ.URL("/clinics/"+clinic.ID) + "/delete" }
		hx-delete={ "/clinics/" + clinic.ID }
		hx-confirm={ l(vc.Locale, "str.are_you_sure") }
		hx-select="#clinics_list"
		hx-target="#clinics_list"
	>
		<button type="submit" class="btn btn-sm btn-circle">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
				<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
			</svg>
		</button>
	</form>
}

templ ClinicsEmptyList(vc *Ctx) {
	<div class="app-card flex">
		<a href="/clinics/new" class="relative block w-full rounded-lg border-2 border-dashed border-base-content/30 p-12 text-center hover:border-base-content/40 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
			<svg
				class="mx-auto w-12 h-12 text-base-content/60"
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
			>
				<path stroke-linecap="round" stroke-linejoin="round" d="M18 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0ZM3 19.235v-.11a6.375 6.375 0 0 1 12.75 0v.109A12.318 12.318 0 0 1 9.374 21c-2.331 0-4.512-.645-6.374-1.766Z"></path>
			</svg>
			<span class="mt-2 block text-sm font-semibold">{ l(vc.Locale, "str.create_new_clinic") }</span>
		</a>
	</div>
}

templ ClinicProfile(clinic model.Clinic, vc *Ctx) {
	<div id="clinic_profile" class="space-y-10 divide-y divide-base-content/10">
		<div class="grid grid-cols-1 gap-x-8 gap-y-8 pt-10 md:grid-cols-3">
			<div class="px-4 sm:px-0">
				<h2 class="text-base font-semibold leading-7">{ l(vc.Locale, "str.clinic_info") }</h2>
				<p class="mt-1 text-sm leading-6 text-base-content/60">{ l(vc.Locale, "str.clinic_info_desc") }</p>
			</div>
			@ClinicForm(clinic, vc) {
				<input type="hidden" name="id" value={ clinic.ID } id="pi_clinic_id"/>
				<div class="px-4 py-6 sm:p-8">
					<div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
						<div class="col-span-full">
							<label for="profile_pic" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.profile_pic") }</label>
							<div class="mt-2 flex items-center gap-x-3">
								if clinic.ProfilePic != "" {
									<div class="avatar">
										<div class="w-12 rounded-full">
											<img src={ string(templ.URL(clinic.ProfilePic)) }/>
										</div>
									</div>
								} else {
									<div class="avatar placeholder">
										<div class="bg-neutral text-neutral-content rounded-full w-12">
											<span class="text-xl">{ clinic.Initials() }</span>
										</div>
									</div>
								}
								<input
									id="profile_pic"
									name="profilePic"
									type="file"
									class="file-input file-input-bordered w-full file-input-primary"
									accept="image/*"
								/>
							</div>
						</div>
						<div class="sm:col-span-4">
							<label for="name" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.clinic_name") }</label>
							<div class="mt-2 form-control">
								<input required min="2" type="text" name="name" value={ clinic.Name } id="name" autocomplete="organization" class="input input-bordered block w-full"/>
								if clinic.FieldError("name") != "" {
									<div class="label">
										<span class="label-text-alt text-error">{ clinic.FieldError("name") }</span>
									</div>
								}
							</div>
						</div>
						<div class="sm:col-span-4">
							<label for="email" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.email_address") }</label>
							<div class="mt-2">
								<input required type="email" name="email" value={ clinic.Email } id="email" autocomplete="email" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-2 flex flex-col">
							<label for="favorite" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.favorite") }</label>
							<div class="flex items-center grow">
								<input type="checkbox" name="favorite" value={ strconv.FormatBool(clinic.Favorite) } id="favorite" class="toggle toggle-warning"/>
							</div>
						</div>
						<div class="sm:col-span-4">
							<label for="phone" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.phone") }</label>
							<div class="mt-2">
								<input required type="text" name="phone" value={ clinic.Phone } id="phone" autocomplete="phone" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-3">
							<label for="price" class="block text-sm font-medium leading-6 text-base-content">{ vc.l("str.appt_price") }</label>
							<div class="mt-2">
								<input
									required
									type="number"
									id="price"
									name="price"
									min="1"
									max="100000"
									step="0.01"
									if clinic.Price == 0 {
										value="0.00"
									} else {
										value={ clinic.PriceInputValue() }
									}
									class="input input-bordered block w-full"
								/>
							</div>
						</div>
						<div class="col-span-full">
							<label for="file_upload" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.cover_photo") }</label>
							<div class="mt-2 flex justify-center rounded-lg border border-dashed border-base-content/25 px-6 py-10">
								<div class="text-center">
									<svg class="mx-auto h-12 w-12 text-base-content/60" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
										<path fill-rule="evenodd" d="M1.5 6a2.25 2.25 0 012.25-2.25h16.5A2.25 2.25 0 0122.5 6v12a2.25 2.25 0 01-2.25 2.25H3.75A2.25 2.25 0 011.5 18V6zM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0021 18v-1.94l-2.69-2.689a1.5 1.5 0 00-2.12 0l-.88.879.97.97a.75.75 0 11-1.06 1.06l-5.16-5.159a1.5 1.5 0 00-2.12 0L3 16.061zm10.125-7.81a1.125 1.125 0 112.25 0 1.125 1.125 0 01-2.25 0z" clip-rule="evenodd"></path>
									</svg>
									<div class="mt-4 flex text-sm leading-6 text-base-content/60">
										<label for="file_upload" class="relative link link-primary font-semibold leading-6">
											<span>{ l(vc.Locale, "str.upload_file") }</span>
											<input id="file_upload" name="profilePic" type="file" class="sr-only"/>
										</label>
										<p class="pl-1">{ l(vc.Locale, "str.or_drag_and_drop") }</p>
									</div>
									<p class="text-xs leading-5 text-base-content/60">PNG, JPG, GIF { l(vc.Locale, "str.up_to_10mb") }</p>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="flex items-center justify-end gap-x-6 border-t border-base-content/10 px-4 py-4 sm:px-8">
					<button type="button" class="btn btn-ghost">{ l(vc.Locale, "btn.cancel") }</button>
					<button type="submit" class="btn btn-primary">{ l(vc.Locale, "btn.save") }</button>
				</div>
			}
		</div>
		<div class="grid grid-cols-1 gap-x-8 gap-y-8 pt-10 md:grid-cols-3">
			<div class="px-4 sm:px-0">
				<h2 class="text-base font-semibold leading-7">{ l(vc.Locale, "str.address") }</h2>
				<p class="mt-1 text-sm leading-6 text-base-content/60">{ l(vc.Locale, "str.address_desc") }</p>
			</div>
			@ClinicForm(clinic, vc) {
				<input type="hidden" name="id" value={ clinic.ID } id="address_clinic_id"/>
				<div class="px-4 py-6 sm:p-8">
					<div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
						<div class="col-span-full">
							<label for="address_line1" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.address_street") }</label>
							<div class="mt-2">
								<input type="text" name="addressLine1" value={ clinic.Address.Line1 } id="address_line1" autocomplete="street-address" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-2 sm:col-start-1">
							<label for="address_city" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.address_city") }</label>
							<div class="mt-2">
								<input type="text" name="addressCity" value={ clinic.Address.City } id="address_city" autocomplete="address-level2" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-2">
							<label for="address_state" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.address_state") }</label>
							<div class="mt-2">
								<input type="text" name="addressState" value={ clinic.Address.State } id="address_state" autocomplete="address-level1" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-2">
							<label for="address_zip_code" class="block text-sm font-medium leading-6">{ l(vc.Locale, "str.address_zip_code") }</label>
							<div class="mt-2">
								<input type="text" name="addressZipCode" value={ clinic.Address.Zip } id="address_zip_code" autocomplete="postal-code" class="input input-bordered block w-full"/>
							</div>
						</div>
					</div>
					<div class="sm:col-span-4">
						<label for="address_country" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.address_country") }</label>
						<div class="mt-2">
							<select id="address_country" name="addressCountry" autocomplete="country-name" class="select select-bordered block w-full">
								@CountryOption("none", "none", clinic.Country)
								@CountryOption("Mexico", "Mexico", clinic.Country)
								@CountryOption("United States", "United States", clinic.Country)
								@CountryOption("Canada", "Canada", clinic.Country)
							</select>
						</div>
					</div>
				</div>
				<div class="flex items-center justify-end gap-x-6 border-t border-base-content/10 px-4 py-4 sm:px-8">
					<button type="button" class="btn btn-ghost">{ l(vc.Locale, "btn.cancel") }</button>
					<button type="submit" class="btn btn-primary">{ l(vc.Locale, "btn.save") }</button>
				</div>
			}
		</div>
		<div class="grid grid-cols-1 pt-8 gap-x-8 gap-y-8 md:grid-cols-3">
			<div class="px-4 sm:px-0">
				<h2 class="text-base font-semibold leading-7">{ l(vc.Locale, "str.social_media") }</h2>
				<p class="mt-1 text-sm leading-6 text-base-content/60">{ l(vc.Locale, "str.social_media_desc") }</p>
			</div>
			@ClinicForm(clinic, vc) {
				<input type="hidden" name="id" value={ clinic.ID } id="mb_clinic_id"/>
				<div class="px-4 py-6 sm:p-8">
					<div class="grid max-w-2xl grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
						<div class="sm:col-span-4">
							<label for="email" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.facebook") }</label>
							<div class="mt-2">
								<input type="url" name="facebook" value={ clinic.Facebook } id="facebook" autocomplete="url" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-4">
							<label for="email" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.instagram") }</label>
							<div class="mt-2">
								<input type="url" name="instagram" value={ clinic.Facebook } id="instagram" autocomplete="url" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-4">
							<label for="email" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.whatsapp") }</label>
							<div class="mt-2">
								<input type="tel" name="whatsapp" value={ clinic.Whatsapp } id="whatsapp" autocomplete="phone" class="input input-bordered block w-full"/>
							</div>
						</div>
						<div class="sm:col-span-4">
							<label for="email" class="block text-sm font-medium leading-6 text-base-content">{ l(vc.Locale, "str.telegram") }</label>
							<div class="mt-2">
								<input type="tel" name="telegram" value={ clinic.Telegram } id="telegram" autocomplete="phone" class="input input-bordered block w-full"/>
							</div>
						</div>
					</div>
				</div>
				<div class="flex items-center justify-end gap-x-6 border-t border-base-content/10 px-4 py-4 sm:px-8">
					<button type="button" class="btn btn-ghost">{ l(vc.Locale, "btn.cancel") }</button>
					<button type="submit" class="btn btn-primary">{ l(vc.Locale, "btn.save") }</button>
				</div>
			}
		</div>
	</div>
}

templ ClinicForm(clinic model.Clinic, vc *Ctx) {
	<form
		class="relative bg-base-100 shadow-sm ring-1 ring-gray-900/5 sm:rounded-xl md:col-span-2"
		method="POST"
		enctype="multipart/form-data"
		if clinic.ID != "" && clinic.ID != "new" {
			hx-patch={ "/clinics/" + clinic.ID }
			action={ templ.URL("/clinics/" + clinic.ID + "/patch") }
		} else {
			hx-post="/clinics"
			action="/clinics"
		}
		hx-target="closest #clinic_profile_cont"
		hx-select="#clinic_profile_cont"
		hx-swap="outerHTML"
	>
		<span class="absolute top-2 right-2 loading loading-ring loading-sm htmx-indicator"></span>
		{ children... }
	</form>
}
