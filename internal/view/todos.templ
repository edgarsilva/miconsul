package view

import (
	"fiber-blueprint/internal/database"
	"strconv"
)

templ Checkbox(t database.Todo) {
	<input
 		class="h-5 w-5 rounded border-gray-300 text-indigo-600 focus:ring-indigo-700"
 		id={ "todo_" + strconv.Itoa(int(t.ID)) }
 		name={ "todo[" + strconv.Itoa(int(t.ID)) + "]" }
 		type="checkbox"
 		if t.Completed {
			checked
			hx-patch={ "/todos/" + strconv.Itoa(int(t.ID)) + "/uncheck" }
		} else {
			hx-patch={ "/todos/" + strconv.Itoa(int(t.ID)) + "/check" }
		}
 		hx-target="this"
 		hx-swap="outerHTML"
	/>
}

templ Todo(t database.Todo) {
	<li class="divide-y divide-gray-200 rounded-lg bg-white shadow">
		<div class="flex w-full items-center justify-between space-x-6 p-6">
			<img class="h-10 w-10 flex-shrink-0 rounded-full bg-gray-300" src="https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=4&w=256&h=256&q=60" alt=""/>
			<div class="flex-1 truncate">
				<div class="flex items-center space-x-3">
					<h3 class="truncate text-sm font-medium text-gray-900">{ t.Title }</h3>
					<span class="inline-flex flex-shrink-0 items-center rounded-full bg-green-50 px-1.5 py-0.5 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">{ t.Priority }</span>
					<span
 						class="inline-flex items-center rounded-full bg-gray-50 px-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10"
					>ID: { strconv.Itoa(int(t.ID)) }</span>
				</div>
				<p class="mt-1 truncate text-sm text-gray-500">{ t.Body }</p>
			</div>
			@Checkbox(t)
		</div>
		<div>
			<div class="-mt-px flex divide-x divide-gray-200">
				<div class="flex w-0 flex-1">
					<button
 						class="relative -mr-px inline-flex w-0 flex-1 items-center justify-center gap-x-3 rounded-bl-lg border border-transparent py-4 text-sm font-semibold text-red-700 stroke-red-700"
 						hx-delete={ "/todos/" + strconv.Itoa(int(t.ID)) }
 						hx-target="closest li"
 						hx-swap="outerHTML swap:0.5s"
					>
						<svg
 							class="h-5 w-5 text-red-700"
 							xmlns="http://www.w3.org/2000/svg"
 							fill="none"
 							viewBox="0 0 24 24"
 							stroke-width="1.5"
 							stroke="currentColor"
						>
							<path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"></path>
						</svg>
						Delete
					</button>
				</div>
				<div class="-ml-px flex w-0 flex-1">
					<button
 						class="relative inline-flex w-0 flex-1 items-center justify-center gap-x-3 rounded-br-lg border border-transparent py-4 text-sm font-semibold text-gray-900"
 						hx-post={ "/todos/" + strconv.Itoa(int(t.ID)) + "/duplicate" }
 						hx-target="#todos"
 						hx-swap="beforeend settle:0.1s"
					>
						<svg class="h-5 w-5 text-black" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
							<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75"></path>
						</svg>
						Duplicate
					</button>
				</div>
			</div>
		</div>
	</li>
}

templ Todos(tds []database.Todo) {
	<div class="container m-auto py-16">
		<ul
 			class="flex flex-col gap-4 max-w-xl m-auto"
 			id="todos"
 			role="list"
		>
			for _, t := range tds {
				@Todo(t)
			}
		</ul>
	</div>
}

templ TodosPage(tds []database.Todo) {
	@BasePage() {
		<main id="root" class="bg-indigo-900 h-screen overflow-y-auto">
			@BackToHome("Back to home", "/", "text-indigo-100 hover:text-white")
			@Todos(tds)
		</main>
	}
}
