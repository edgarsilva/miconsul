package todos

import (
	"fiber-blueprint/internal/database"
	"strconv"
)

templ TodoCreateForm() {
	<div class="mb-4 mx-auto container sm:max-w-xl">
		<form hx-post="/todos" hx-swap="beforeend" hx-target="#todos">
			@TodoCreateInput()
		</form>
	</div>
}

templ TodoCreateInput() {
	<input
 		class="block w-full rounded-lg border-0 bg-white/5 p-2 text-stone-100 shadow-sm ring-1 ring-inset ring-stone-200/10 focus:ring-2 focus:ring-inset focus:ring-stone-200 sm:text-lg sm:leading-6"
 		type="text"
 		name="title"
 		id="title"
 		autocomplete="given-name"
 		placeholder="What needs to be done?"
	/>
}

templ TodoCheckbox(t database.Todo) {
	<input
 		class="h-6 w-6 rounded-md border-blue-600 text-blue-600 focus:ring-blue-600"
 		id={ "todo_" + strconv.Itoa(int(t.ID)) }
 		name={ "todo[" + strconv.Itoa(int(t.ID)) + "]" }
 		type="checkbox"
 		if t.Completed {
			checked
			hx-patch={ "/todos/" + strconv.Itoa(int(t.ID)) + "/uncheck" }
		} else {
			hx-patch={ "/todos/" + strconv.Itoa(int(t.ID)) + "/check" }
		}
 		hx-target="this"
 		hx-swap="outerHTML"
	/>
}

templ TodoLi(t database.Todo) {
	<li class="divide-y divide-stone-500 rounded-sm shadow">
		<div class="flex w-full items-center justify-between space-x-6 p-6">
			@TodoCheckbox(t)
			<div class="flex-1 truncate">
				<div class="flex items-center space-x-3">
					<h3 class="truncate text-sm font-medium text-stone-100">{ t.Title }</h3>
					<span
 						class="inline-flex items-center rounded-full bg-gray-50 p-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10"
					>{ t.Priority }</span>
					<span
 						class="inline-flex items-center rounded-full bg-gray-50 p-2 py-1 text-xs font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10"
					>ID: { strconv.Itoa(int(t.ID)) }</span>
				</div>
				<p class="mt-1 truncate text-sm text-gray-500">{ t.Body }</p>
			</div>
			<button
 				class="p-2 flex-1 items-center justify-center rounded-full border border-red-500 text-red-500 text-sm font-semibold  grow-0 hover:bg-red-500 hover:text-white"
 				hx-delete={ "/todos/" + strconv.Itoa(int(t.ID)) }
 				hx-target="closest li"
 				hx-swap="outerHTML swap:0.5s"
			>
				<svg
 					class="h-5 w-5"
 					xmlns="http://www.w3.org/2000/svg"
 					fill="none"
 					viewBox="0 0 24 24"
 					stroke-width="1.5"
 					stroke="currentColor"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"></path>
				</svg>
			</button>
			<button
 				class="p-2 flex-1 items-center justify-center rounded-full border border-transparent text-sm font-semibold bg-blue-800 text-blue-300 grow-0"
 				hx-post={ "/todos/" + strconv.Itoa(int(t.ID)) + "/duplicate" }
 				hx-target="#todos"
 				hx-swap="beforeend settle:0.1s"
			>
				<svg
 					class="h-5 w-5 text-blue-200"
 					xmlns="http://www.w3.org/2000/svg"
 					fill="none"
 					viewBox="0 0 24 24"
 					stroke-width="1.5"
 					stroke="currentColor"
 					class="w-6 h-6"
				>
					<path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75"></path>
				</svg>
			</button>
		</div>
	</li>
}

templ TodosList(tds []database.Todo) {
	<div class="container m-auto">
		<ul
 			class="flex flex-col gap-0 max-w-xl m-auto divide-y divide-stone-200 border border-stone-200"
 			id="todos"
 			role="list"
		>
			for _, t := range tds {
				@TodoLi(t)
			}
		</ul>
	</div>
}

templ TodosFooter(left string, filter string) {
	<div
 		class="flex items-center sm:max-w-xl mx-auto py-4"
 		hx-get="/todos/fragment/footer"
 		hx-trigger="todosUpd from:body"
 		hx-swap="outerHTML"
	>
		<span class="text-stone-100 text-sm">{ left } items left</span>
		<span class="isolate inline-flex rounded-md shadow-sm ml-auto gap-2">
			<button
 				type="button"
 				class={ "relative inline-flex items-center rounded px-3 py-2 text-sm font-semibold text-stone-200 ring-1 ring-inset ring-stone-300 hover:bg-stone-50 hover:text-stone-800 focus:z-10", templ.KV("bg-stone-200 text-stone-800", filter == "all") }
			>All</button>
			<button
 				type="button"
 				class={ "relative inline-flex items-center rounded px-3 py-2 text-sm font-semibold text-stone-200 ring-1 ring-inset ring-stone-300 hover:bg-stone-50 hover:text-stone-800 focus:z-10", templ.KV("bg-stone-200 text-stone-800", filter == "pending") }
			>Pending</button>
			<button
 				type="button"
 				class={ "relative inline-flex items-center rounded px-3 py-2 text-sm font-semibold text-stone-200 ring-1 ring-inset ring-stone-300 hover:bg-stone-50 hover:text-stone-800 focus:z-10", templ.KV("bg-stone-200 text-stone-800", filter == "compleded") }
			>Completed</button>
		</span>
	</div>
}

templ TodosPage(tds []database.Todo, left string, filter string) {
	@BasePage() {
		<main id="root" class="bg-stone-800 h-screen overflow-y-auto">
			@BackToHome("Back to home", "/", "text-stone-100 hover:text-white")
			@CreateTodoForm()
			@Todos(tds)
			@TodosFooter(left, filter)
		</main>
	}
}
